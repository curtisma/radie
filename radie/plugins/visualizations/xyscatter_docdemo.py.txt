"""solely here as a template to demonstrate in the documentation"""
import os

from PyQt5 import QtCore, QtWidgets
import pyqtgraph as pg

from radie.qt.visualizations import base, register_visualizations
from radie.qt import dpi, cfg, colors, plotlist
from radie.qt.plotlist import DFXYListView
from radie.qt.plotwidget import PlotWidget
from radie.qt import functions as fn


class DFItem(plotlist.DFItem):
    """an item class with pyqtgraph xy curve handles of type PlotDataItem"""
    def __init__(self, ref, item_list, name=None):
        super(DFItem, self).__init__(ref, item_list, name)
        self.plotDataItem = pg.PlotDataItem()
        self.color = None
        self.plotDataItem.setData(
            x=self.x_data(),
            y=self.y_data(),
            name=self.text
        )

    def setText(self, value):
        self.text = value
        self.plotDataItem.setData(name=value)
        self.plotDataItem.updateItems()


class XYScatterDemo(base.Visualization):
    """A generic XY scatter visualization"""
    name = "XY Scatter Demo"
    description = "A generic visualization of XY curves from DataStructure Series"
    _icon_image = os.path.join(cfg.icon_path, "xyscatter.svg")

    def __init__(self, parent=None):
        super().__init__(parent)
        self.setupUi()

        self.treeView_datasets.setItemClass(DFItem)  # required before the list will accept any drops
        self.treeView_datasets.model().itemsAdded.connect(self.addCurves)
        self.treeView_datasets.model().itemAccessorChanged.connect(self.itemDataChanged)
        self.treeView_datasets.model().itemsDeleted.connect(self.processNewLayout)
        self.treeView_datasets.model().rowsMoved.connect(self.processNewLayout)
        self.treeView_datasets.model().itemToggled.connect(self.itemToggled)
        self.treeView_datasets.model().itemTextUpdated.connect(self.plotWidget.plotItem.resetLegend)

        self.lineEdit_xlabel.textChanged.connect(self.setXLabel)
        self.lineEdit_ylabel.textChanged.connect(self.setYLabel)

        self._colors = None
        self.resetColors()

    def setupUi(self):
        self.setWindowTitle("XY Scatter Plot")
        self.resize(800, 450)

        self.verticalLayout_main = QtWidgets.QVBoxLayout(self)
        self.verticalLayout_main.setContentsMargins(3, 3, 3, 3)
        self.splitter = QtWidgets.QSplitter(self)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.layoutWidget = QtWidgets.QWidget(self.splitter)  # left half of the splitter
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.treeView_datasets = DFXYListView(self.layoutWidget)
        self.verticalLayout.addWidget(self.treeView_datasets)
        self.formLayout_plotOptions = QtWidgets.QFormLayout()
        self.label_xlabel = QtWidgets.QLabel("X-Label", self.layoutWidget)
        self.formLayout_plotOptions.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.label_xlabel)
        self.lineEdit_xlabel = QtWidgets.QLineEdit(self.layoutWidget)
        self.formLayout_plotOptions.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.lineEdit_xlabel)
        self.lineEdit_ylabel = QtWidgets.QLineEdit(self.layoutWidget)
        self.formLayout_plotOptions.setWidget(1, QtWidgets.QFormLayout.FieldRole, self.lineEdit_ylabel)
        self.label_ylabel = QtWidgets.QLabel("Y-Label", self.layoutWidget)
        self.formLayout_plotOptions.setWidget(1, QtWidgets.QFormLayout.LabelRole, self.label_ylabel)
        self.verticalLayout.addLayout(self.formLayout_plotOptions)
        self.plotWidget = PlotWidget(self.splitter)
        self.verticalLayout_main.addWidget(self.splitter)

        # not part of the QtDesigner output, but necessary for good appearance
        self.splitter.setStretchFactor(0, 0)
        self.splitter.setStretchFactor(1, 1)
        self.splitter.setSizes(dpi.width_by_height(280, 720))

    def setAxisLabel(self, axis: str, text: str):
        if not text:
            self.plotWidget.plotItem.showLabel(axis, False)
            return
        self.plotWidget.setLabel(axis=axis, text=text)

    def setXLabel(self, text: str):
        self.setAxisLabel("bottom", text)

    def setYLabel(self, text: str):
        self.setAxisLabel("left", text)

    def nextColor(self):
        return next(self._colors)

    def resetColors(self):
        self._colors = colors.colors()

    def itemDataChanged(self, item: DFItem):
        if not item.isChecked():
            return

        item.plotDataItem.setData(
            x=item.x_data(),
            y=item.y_data()
        )

    def itemToggled(self, item):
        if item.checkState:
            item.plotDataItem.setData(
                x=item.x_data(),
                y=item.y_data(),
                name=item.text
            )
        else:
            item.plotDataItem.setData(name=None)
            item.plotDataItem.clear()
        self.plotWidget.plotItem.resetLegend()

    def processNewLayout(self):
        self.plotWidget.plotItem.clear()
        self.plotWidget.plotItem.resetLegend()
        for item in self.treeView_datasets.iterItems():
            self.plotWidget.addItem(item.plotDataItem)

    def addCurves(self, items):
        """main function for adding new curves to the plot

        Parameters
        ----------
        items : list of DFItem
        """
        for item in items:
            item.color = self.nextColor()
            item.plotDataItem.setData(pen=item.color)
            item.plotDataItem.updateItems()  # required if setData is only used for styles
            self.plotWidget.plotItem.addItem(item.plotDataItem)


register_visualizations(XYScatterDemo)

if __name__ == "__main__":
    import sys
    from radie.plugins import examples
    from radie.qt.masterdftree import DFReference
    app = fn.instantiate_app()
    fn.reset_excepthook()  # PyQt5 exists silently, sucks for debugging

    df1 = examples.example_powderdiffraction(); df1.metadata["name"] = "xrd1"
    df2 = examples.example_powderdiffraction(); df2.metadata["name"] = "xrd2"
    df2["intensity"] += 10; df2["intensity"] *= 1.1
    ref1 = DFReference(df1, None)
    ref2 = DFReference(df2, None)

    plot = XYScatterDemo()
    plot.treeView_datasets.addDataFrames(ref1, ref2)
    plot.show()

    sys.exit(app.exec_())
